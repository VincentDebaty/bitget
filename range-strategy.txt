//@version=5
strategy(title="Range strategy", overlay=true, initial_capital = 1000, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, commission_value = 0.05, precision = 2)

getValue(string key, string symbol) =>
    switch key
        'margeMin' =>
            switch symbol
                'ETH' => 1.8
                'SOL' => 1.8
                'TRX' => 3.3
                'APT' => 1.8
                'STX' => 1.8
                'ARB' => 1.8
                'LDO' => 1.8
                'TOMO' => 1.8
                'LINA' => 4
                'LQTY' => 1.8
                'ID' => 1.8
                => 1.8
        'margeMax' =>
            switch symbol
                'ETH' => 30
                'SOL' => 20
                'TRX' => 30
                'APT' => 30
                'STX' => 30
                'ARB' => 30
                'LDO' => 30
                'TOMO' => 30
                'LINA' => 30
                'LQTY' => 10
                'ID' => 30
                => 30
        'length' =>
            switch symbol
                'ETH' => 500
                'SOL' => 500
                'TRX' => 500
                'APT' => 450
                'STX' => 500
                'ARB' => 500
                'LDO' => 500
                'TOMO' => 500
                'LINA' => 450
                'LQTY' => 450
                'ID' => 450
                => 500
        'mult' =>
            switch symbol
                'ETH' => 2
                'SOL' => 1.85
                'TRX' => 2
                'APT' => 1.8
                'STX' => 1.45
                'ARB' => 1.6
                'LDO' => 1.2
                'TOMO' => 1.7
                'LINA' => 1.8
                'LQTY' => 1.5
                'ID' => 1.85
                => 1.75

title = syminfo.basecurrency

testing = input.bool(false, "testing")

margeMin = testing ? input.float(3.5, minval=0, step=0.05, title="Marge min (%)") : getValue('margeMin', title)
margeMax = testing ? input.float(20, minval=5, step=0.1, title="Marge max (%)") : getValue('margeMax', title)
length =  testing ? input.int(500, minval=1) : int(getValue('length', title))
mult = testing ? input.float(1.75, minval=0.001, step=.01, maxval=50) : getValue('mult', title)

profit1 = input.float(7, minval=0, step=0.1, title = "Profit level 1", group="Settings")
profit3 = input.float(3.5, minval=0, step=0.1, title = "Profit level 3", group="Settings")
leverage = input.int(10, minval=1, step=1, title = "Leverage", group="Settings")
src = input.source(hlc3, title="Source", group="Settings")

var int periodLimit = 85

// FIBO
basis = ta.vwma(src, length)
dev = mult * ta.stdev(src, length)
upper_1= basis + (0.236*dev)
upper_2= basis + (0.382*dev)
upper_3= basis + (0.5*dev)
upper_4= basis + (0.618*dev)
upper_5= basis + (0.764*dev)
upper_6= basis + (1*dev)
lower_1= basis - (0.236*dev)
lower_2= basis - (0.382*dev)
lower_3= basis - (0.5*dev)
lower_4= basis - (0.618*dev)
lower_5= basis - (0.764*dev)
lower_6= basis - (1*dev)
plot(basis, color=color.fuchsia, linewidth=2)
//p1 = plot(upper_1, color=color.silver, linewidth=1, title="0.236")
//p2 = plot(upper_2, color=color.silver, linewidth=1, title="0.382")
p3 = plot(upper_3, color=color.silver, linewidth=1, title="0.5")
//p4 = plot(upper_4, color=color.silver, linewidth=1, title="0.618")
//p5 = plot(upper_5, color=color.silver, linewidth=1, title="0.764")
p6 = plot(upper_6, color=color.red, linewidth=2, title="1")
//p13 = plot(lower_1, color=color.silver, linewidth=1, title="0.236")
//p14 = plot(lower_2, color=color.silver, linewidth=1, title="0.382")
p15 = plot(lower_3, color=color.silver, linewidth=1, title="0.5")
//p16 = plot(lower_4, color=color.silver, linewidth=1, title="0.618")
//p17 = plot(lower_5, color=color.silver, linewidth=1, title="0.764")
p18 = plot(lower_6, color=color.green, linewidth=2, title="1")
    

// STRATYEGY

bool demo = false
var string symbol = (demo ? "S" : "") + syminfo.basecurrency + (demo ? "S" : "") + syminfo.currency + "_" + (demo ? "S" : "") + "UMCBL"
var string marginCoin = (demo ? "S" : "") + syminfo.currency

var float longStop = 0
var float longProfit = 0

var float shortStop = 0
var float shortProfit = 0

var int periodPosition = 0
var float entryPrice = 0

float amplitude = ((upper_6 / lower_6)-1) * 100

var float amplitudePosition = 0
var float breakHeaven = 0

var bool signalLong = false
var bool signalShort = false
var float signalPeriod = 0

// START

if amplitude > 12
    periodLimit := 160
else
    periodLimit := 85

if close < lower_3
    signalLong := true
    signalShort := false
    signalPeriod := 0
    strategy.cancel_all()
if close > upper_3
    signalLong := false
    signalShort := true
    signalPeriod := 0
    strategy.cancel_all()

if close < basis
    signalShort := false
if close > basis
    signalLong := false


long_entry = signalLong and amplitude > margeMin and amplitude < margeMax and strategy.position_size == 0
short_entry = signalShort and amplitude > margeMin and amplitude < margeMax and strategy.position_size == 0


bool longCondition = long_entry and close < basis
bool shortCondition = short_entry and close > basis

// Create entries based on the cross conditions for both trades biases.

breakHeaven := entryPrice + (entryPrice * 0.002)

if longCondition
    periodPosition := 0

if periodPosition > periodLimit
    longStop := lower_6
    longProfit := breakHeaven
else
    if amplitude > profit1
        longStop := lower_6
        longProfit := upper_3
    else if amplitude > profit3
        longStop := lower_6
        longProfit := upper_3
    else
        longStop := lower_6
        longProfit := upper_3

    if longProfit < breakHeaven
        longProfit := upper_6
        if longProfit > breakHeaven
            longProfit := breakHeaven

if longCondition
    entryPrice := basis
    periodPosition := 0
    amplitudePosition := amplitude

    messageEntry = '{"type": "entry", "symbol":"' + symbol + '","margin_coin": "' + marginCoin + '","side": "open_long","price": ' + str.tostring(entryPrice) + ',"quantity": 10,"leverage": ' + str.tostring(leverage) + '}'
    strategy.entry("LONG", strategy.long, stop=entryPrice, alert_message=messageEntry)
    messageExit= '{"type": "exit", "side": "close_short", "symbol": "' + symbol + '"}'
    strategy.exit("EXIT LONG", from_entry = "LONG", stop=longStop, limit=longProfit, alert_message=messageExit)

else if open[1] < close[1]
    strategy.cancel('LONG')
    
if strategy.position_size > 0
    signalLong := false
    periodPosition := periodPosition + 1
    if periodPosition == 1
        label.new(x=bar_index, y=high, textalign=text.align_left, style=label.style_label_down, size=size.small, text="Ampl.: " + str.tostring(amplitudePosition, '#.####') + "\nProfit: " + str.tostring(longProfit, '#.####') + "\nStop: " + str.tostring(longStop, '#.####'), color= color.new(color.white, 30))


    messageExit= '{"type": "exit", "side": "close_short", "symbol": "' + symbol + '"}'
    strategy.exit("EXIT LONG", from_entry = "LONG", stop=longStop, limit=longProfit, alert_message=messageExit)
    //strategy.close('LONG', comment='upper_3')

breakHeaven := entryPrice - (entryPrice * 0.002)

if shortCondition
    periodPosition := 0

if periodPosition > periodLimit
    shortStop := upper_6
    shortProfit := breakHeaven
else
    if amplitude > profit1
        shortStop := upper_6
        shortProfit := lower_3
    else if amplitude > profit3
        shortStop := upper_6
        shortProfit := lower_3
    else
        shortStop := upper_6
        shortProfit := lower_3

    if shortProfit > breakHeaven
        shortProfit := lower_6
        if shortProfit > breakHeaven
            shortProfit := breakHeaven

if shortCondition
    entryPrice := basis
    periodPosition := 0
    amplitudePosition := amplitude

    messageEntry = '{"type": "entry", "symbol": "' + symbol + '","margin_coin": "' + marginCoin + '","side": "open_short","price": ' + str.tostring(entryPrice) + ',"quantity": 10,"leverage": ' + str.tostring(leverage) + '}'
    strategy.entry("SHORT", strategy.short, stop=entryPrice, alert_message=messageEntry)
    messageExit= '{"type": "exit", "side": "close_short", "symbol": "' + symbol + '"}'
    strategy.exit("EXIT SHORT", from_entry = "SHORT", stop=shortStop, limit=shortProfit, alert_message=messageExit)
else if open[1] > close[1]
    strategy.cancel('SHORT')

if strategy.position_size < 0
    signalShort := false
    periodPosition := periodPosition + 1
    if periodPosition == 1
        label.new(x=bar_index, y=low, textalign=text.align_left, style=label.style_label_up, size=size.small, text="Ampl.: " + str.tostring(amplitudePosition, '#.####') + "\nProfit: " + str.tostring(shortProfit, '#.####') + "\nStop: " + str.tostring(shortStop, '#.####'), color= color.new(color.white, 30))

    var messageExit= '{"type": "exit", "side": "close_short", "symbol": "' + symbol + '"}'
    strategy.exit("EXIT SHORT", from_entry = "SHORT", stop=shortStop, limit=shortProfit, alert_message=messageExit)

if strategy.position_size == 0
    periodPosition := 0

printTable(txtLeft, txtRight) =>
    var table t = table.new(position.bottom_left, 2, 1)
    table.cell(t, 0, 0, txtLeft, bgcolor = color.yellow, text_halign = text.align_right)
    table.cell(t, 1, 0, txtRight, bgcolor = color.yellow, text_halign = text.align_left)

nl = "\n"
left =
  "Base currency: "         + nl +
  "Currency: "              + nl +
  "Amplitude (" + str.tostring(margeMin) + '/' + str.tostring(margeMax) + ')' + nl +
  "Length"                  + nl +
  "Multiple"                + nl +
  "----------------"            + nl +
  (strategy.position_size == 0 ? (
  "Signal 1"                + nl +
  "Signal 2"                + nl
  ):(
  "Entry: "                 + nl +
  "Period"                  + nl +
  "TP"                      + nl +
  "SL"                      + nl +
  "Current profit"
  ))

right =
  syminfo.basecurrency   + nl +
  syminfo.currency                  + nl +
  str.tostring(amplitude, '#.##') + '%' + nl +
  str.tostring(length) + nl +
  str.tostring(mult) + nl +
  "--------------" + nl +
  (strategy.position_size == 0 ? (
  str.tostring(signalLong ? 'long' : signalShort ? 'short' : '-') + nl +
  str.tostring(long_entry ? 'long' : short_entry ? 'short' : '-') + nl
  ) : (
  str.tostring(entryPrice, '#.##') + nl +
  str.tostring(periodPosition) + '/' + str.tostring(periodLimit) + nl +
  str.tostring(strategy.position_size > 0 ? longProfit : strategy.position_size < 0 ? shortProfit : 0, '#.##') + ' (' + str.tostring(strategy.position_size > 0 ? (1 - (entryPrice / longProfit)) * 100 : strategy.position_size < 0 ? (1 - (shortProfit / entryPrice)) * 100 : 0, '#.##') + '%)' + nl +
  str.tostring(strategy.position_size > 0 ? longStop : strategy.position_size < 0 ? shortStop : 0, '#.##') + ' (' + str.tostring(strategy.position_size > 0 ? (1 - (entryPrice / longStop)) * 100 : strategy.position_size < 0 ? (1 - (shortStop / entryPrice)) * 100 : 0, '#.##') + '%)' + nl +
  str.tostring(strategy.position_size > 0 ? (1 - (entryPrice / close)) * 100 : strategy.position_size < 0  ? (1 - (close / entryPrice)) * 100 : 0, '#.##') + '%'
  ))
printTable(left, right)